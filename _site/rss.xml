<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Molezz 的胡言乱语</title>
    <link>https://molezzz.github.io</link>
    <description>一枚程序猿的自留地</description>
    <pubDate>Sat, 12 Jul 2014 23:31:01 +0800</pubDate>
    <item>
      <title>使用Ruby实现BigPipe</title>
      <link>https://molezzz.github.io/ruby/2014/07/12/bigpipe-with-ruby.html</link>
      <description>&lt;p&gt;试想这样一个场景，一个经常访问的网站，每次打开它的页面都要要花费6 秒；同时另外一个网站提供了相似的服务，但响应时间只需3 秒，那么你会如何选择呢？数据表明，如果用户打开一个网站，等待3~4 秒还没有任何反应，他们会变得急躁，焦虑，抱怨，甚至关闭网页并且不再访问，这是非常糟糕的情况。所以，网页加载的速度十分重要,尤其对于拥有大量用户的大型网站，有着大量并发请求、海量数据等客观情况，速度就成了必须攻克的难题之一。&lt;/p&gt;

&lt;h3&gt;BigPipe的技术背景&lt;/h3&gt;

&lt;p&gt;2010 年初的时候，Facebook 的前端性能研究小组开始了他们的优化项目，经过了六个月的努力，成功的将个人空间主页面加载耗时由原来的5 秒减少为现在的2.5 秒。这是一个非常了不起的成就，也给用户来带来了很好的体验。在优化项目中，Facebook的高级研究科学家蒋长浩(Changhao Jiang)博士提出了一种新的页面加载技术，称之为Bigpipe。&lt;/p&gt;

&lt;h3&gt;传统的页面加载模型&lt;/h3&gt;

&lt;p&gt;首先，我们来看一个传统页面的加载流程。一个动态页面从用户请求开始到最终渲染结束大致分成以下几个步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用户访问网页，浏览器发送一个HTTP请求到网络服务器&lt;/li&gt;
&lt;li&gt;服务器解析这个请求，然后从存储层取得数据，经过一系列复杂的处理生成一个html文件内容，并在一个HTTP Response 中把它传送给客户端&lt;/li&gt;
&lt;li&gt;HTTP response 在网络中传输&lt;/li&gt;
&lt;li&gt;浏览器解析这个Response ，创建一个DOM树，然后下载所需的CSS和JS文件&lt;/li&gt;
&lt;li&gt;下载完CSS文件后，浏览器解析他们并且应用在相应的内容上&lt;/li&gt;
&lt;li&gt;下载完JS后，浏览器解析和执行他们&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-07/12/bs_normal.png&quot; alt=&quot;流程图&quot;&gt;&lt;/p&gt;

&lt;p&gt;这种模式有明显的缺陷：
流程中的动作是按照顺序执行的，如果前面一个动作没结束，后面的动作就不能被执行。也就是说，浏览器在发送请求到收到回应这个过程中一直处于闲置状态。在用户看来，这个阶段浏览器一直显示一个空白页面；当浏览器加载并渲染内容的时候，服务器又处于闲置状态，时间和性能的浪费由此产生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-07/12/bs_normal_2.jpg&quot; alt=&quot;时间片1&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图：现有的服务模型，横轴表示花费的时间。黄色表示在服务器的生成页面内容的时间，白色表示网络传输时间，蓝色表示在浏览器渲染页面的时间。可以看出，现有的模式造成很大的时间浪费。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-07/12/bs_normal_3.jpg&quot; alt=&quot;时间片2&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图中绿色表示服务器从存储层取查数据花费的时间。在海量数据下，当执行一条很费时的查询语句时（如上图右侧），服务器就就阻塞在那 里没有其他操作，而浏览器更是得不到任何反馈。这会造成非常不友好的用户体验，用户不知道什么原因使他们等待很长时间。&lt;/p&gt;

&lt;h3&gt;使用Ajax&lt;/h3&gt;

&lt;p&gt;为了解决页面生成时间慢造成用户等待时间长的问题，有些人想出了使用Ajax技术分块加载内容的解决办法。即将网页的内容进行分区，首次请求时，服务器会返回整个网页的框架，然后浏览器解析并运行javascript，javascript向浏览器发出XMLHttpRequest，获取区块的数据。服务器收到请求后进行处理，并返回区块数据，浏览器再次渲染。这个过程反复执行，直到所有需要显示的区块都被加载完。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-07/12/bs_ajax.png&quot; alt=&quot;Ajax流程图&quot;&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 12 Jul 2014 23:31:01 +0800</pubDate>
      <dc:date>2014-07-12T23:31:01+08:00</dc:date>
    </item>
    <item>
      <title>Welcome to Jekyll!</title>
      <link>https://molezzz.github.io/jekyll/update/2013/11/10/welcome-to-jekyll.html</link>
      <description>&lt;p&gt;You&amp;#39;ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;p&gt;<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">em</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">quot</span><span class="p">;</span><span class="no">Hi</span><span class="p">,</span> <span class="c1">#{name}&amp;amp;quot;</span>
<span class="k">end</span>
<span class="nb">print</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">em</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">hi</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="c1">#39;Tom&amp;amp;#39;)&amp;lt;/p&amp;gt;</span>

<span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">h1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">gt</span><span class="p">;</span> <span class="n">prints</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="c1">#39;Hi, Tom&amp;amp;#39; to STDOUT.&amp;lt;/h1&amp;gt;</span>

<span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="nb">p</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span></code></pre></div>&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&amp;#39;s GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Sun, 10 Nov 2013 18:18:00 +0800</pubDate>
      <dc:date>2013-11-10T18:18:00+08:00</dc:date>
    </item>
    <dc:date>2014-07-12T23:31:01+08:00</dc:date>
  </channel>
</rss>